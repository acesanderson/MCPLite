2025-05-26 08:31:28,225 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-26 08:31:28,225 [INFO] mcplite:44 (<module>) - Initializing MCPLite application
2025-05-26 08:31:28,295 [INFO] __main__:165 (<module>) - Initializing MCPLite Fetch Server
2025-05-26 08:31:28,296 [DEBUG] mcplite:142 (resource) - Detected regular resource.
2025-05-26 08:31:28,296 [DEBUG] mcplite:142 (resource) - Detected regular resource.
2025-05-26 08:31:28,296 [INFO] __main__:330 (<module>) - Starting MCPLite Fetch Server...
2025-05-26 08:31:28,296 [INFO] __main__:331 (<module>) - Configuration: ignore_robots_txt=False, custom_user_agent=Default, proxy_url=None
2025-05-26 08:31:28,296 [INFO] mcplite:71 (run) - Request made to Server from Client.
2025-05-26 08:31:28,296 [INFO] mcplite:78 (run) - Starting the server...
2025-05-26 08:31:28,296 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"63d81fdc47fe4c3d9c1ebc1722c0e6ce","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 08:31:28,296 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"63d81fdc47fe4c3d9c1ebc1722c0e6ce","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 08:31:28,296 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:31:28,296 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 08:31:28,296 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 08:31:28,296 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}
2025-05-26 08:31:28,297 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"b7379858a5e34da1a2a958f0fca8f899","method":"resources/list","params":null}
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"b7379858a5e34da1a2a958f0fca8f899","method":"resources/list","params":null}
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/list' params=None
2025-05-26 08:31:28,297 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/list' params=None
2025-05-26 08:31:28,297 [INFO] MCPLite.routes.ServerRoutes:147 (resources_list) - Routed to resources_list route: method='resources/list' params=None
2025-05-26 08:31:28,297 [INFO] MCPLite.routes.ServerRoutes:153 (resources_list) - Returning resource list: [ResourceDefinition(uri='fetch://status', name='fetch_status', description='Returns the current status and configuration of the fetch server.', mimeType='text/plain', size=1024), ResourceDefinition(uri='fetch://help', name='fetch_help', description='Returns help information about using the fetch server.', mimeType='text/plain', size=1024)]
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resources': [{'uri': 'fetch://status', 'name': 'fetch_status', 'description': 'Returns the current status and configuration of the fetch server.', 'mimeType': 'text/plain', 'size': 1024}, {'uri': 'fetch://help', 'name': 'fetch_help', 'description': 'Returns help information about using the fetch server.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}
2025-05-26 08:31:28,297 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"f40d1b1d859042a4b5361f60cdb2ed89","method":"resources/templates/list","params":null}
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"f40d1b1d859042a4b5361f60cdb2ed89","method":"resources/templates/list","params":null}
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:31:28,297 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/templates/list' params=None
2025-05-26 08:31:28,297 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/templates/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:160 (resources_templates_list) - Routed to resources_templates_list route: method='resources/templates/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:166 (resources_templates_list) - Returning resource template list: []
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resourceTemplates': []}
2025-05-26 08:31:28,298 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"79dbd6ce0df24a43ad281008b89d2a11","method":"tools/list","params":null}
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"79dbd6ce0df24a43ad281008b89d2a11","method":"tools/list","params":null}
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='tools/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='tools/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:291 (tools_list) - Routed to tools_list route: method='tools/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:295 (tools_list) - Returning tool list: [ToolDefinition(name='fetch', description='Fetch a URL from the internet and extract its contents as markdown.\n\n    Args:\n        url: URL to fetch (required)\n        max_length: Maximum number of characters to return (default: 5000)\n        start_index: Start content from this character index (default: 0)\n        raw: Get raw content without markdown conversion (default: false)\n\n    Returns:\n        The fetched content, optionally converted to markdown', inputSchema=InputSchema(type='object', properties={'url': 'str', 'max_length': 'int', 'start_index': 'int', 'raw': 'bool'}))]
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'tools': [{'name': 'fetch', 'description': 'Fetch a URL from the internet and extract its contents as markdown.\n\n    Args:\n        url: URL to fetch (required)\n        max_length: Maximum number of characters to return (default: 5000)\n        start_index: Start content from this character index (default: 0)\n        raw: Get raw content without markdown conversion (default: false)\n\n    Returns:\n        The fetched content, optionally converted to markdown', 'inputSchema': {'type': 'object', 'properties': {'url': 'str', 'max_length': 'int', 'start_index': 'int', 'raw': 'bool'}}}], 'nextCursor': None}
2025-05-26 08:31:28,298 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"2c11e6f21e424f7ab61b1b09001a2e10","method":"prompts/list","params":null}
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"2c11e6f21e424f7ab61b1b09001a2e10","method":"prompts/list","params":null}
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='prompts/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='prompts/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:132 (prompts_list) - Routed to prompts_list route: method='prompts/list' params=None
2025-05-26 08:31:28,298 [INFO] MCPLite.routes.ServerRoutes:136 (prompts_list) - Returning prompt list: [PromptDefinition(name='fetch_prompt', description='Fetch a URL and extract its contents as markdown.\n\n    Args:\n        url: URL to fetch (required)\n\n    Returns:\n        A prompt asking to fetch the URL content', arguments=[Argument(name='url', description='', required=True)])]
2025-05-26 08:31:28,298 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'prompts': [{'name': 'fetch_prompt', 'description': 'Fetch a URL and extract its contents as markdown.\n\n    Args:\n        url: URL to fetch (required)\n\n    Returns:\n        A prompt asking to fetch the URL content', 'arguments': [{'name': 'url', 'description': '', 'required': True}]}], 'nextCursor': None}
2025-05-26 08:31:28,299 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 08:31:28,299 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 08:31:28,299 [INFO] MCPLite.server.Server:86 (process_message) - Valid JSON-RPC notification, processing...
2025-05-26 08:31:28,299 [INFO] MCPLite.server.Server:126 (_process_notification) - Routing notification: method='notifications/initialized' params={}
2025-05-26 08:31:28,299 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='notifications/initialized' params={}
2025-05-26 08:31:28,299 [INFO] MCPLite.routes.ServerRoutes:66 (initialized) - Received initialized notification - MCP handshake complete
2025-05-26 08:31:28,299 [INFO] MCPLite.routes.ServerRoutes:74 (initialized) - Server fully initialized at 2025-05-26 08:31:28.299268
2025-05-26 08:32:00,227 [INFO] MCPLite.transport.StdioTransport:166 (read_json_message) - Received JSON message: {"jsonrpc":"2.0","id":"5dac9dfa3a3b4fb5851bd5f4602b7381","method":"tools/call","params":{"name":"fetch","arguments":{"url":"https://modelcontextprotocol.io","max_length":5000,"start_index":0,"raw":false}}}
2025-05-26 08:32:00,228 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"5dac9dfa3a3b4fb5851bd5f4602b7381","method":"tools/call","params":{"name":"fetch","arguments":{"url":"https://modelcontextprotocol.io","max_length":5000,"start_index":0,"raw":false}}}
2025-05-26 08:32:00,228 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 08:32:00,228 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='tools/call' params=CallToolRequestParams(name='fetch', arguments={'url': 'https://modelcontextprotocol.io', 'max_length': 5000, 'start_index': 0, 'raw': False})
2025-05-26 08:32:00,228 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='tools/call' params=CallToolRequestParams(name='fetch', arguments={'url': 'https://modelcontextprotocol.io', 'max_length': 5000, 'start_index': 0, 'raw': False})
2025-05-26 08:32:00,228 [INFO] MCPLite.routes.ServerRoutes:255 (tools_call) - Routed to tools_call route: method='tools/call' params=CallToolRequestParams(name='fetch', arguments={'url': 'https://modelcontextprotocol.io', 'max_length': 5000, 'start_index': 0, 'raw': False})
2025-05-26 08:32:00,228 [INFO] MCPLite.routes.ServerRoutes:269 (tools_call) - Calling tool: fetch with arguments: {'url': 'https://modelcontextprotocol.io', 'max_length': 5000, 'start_index': 0, 'raw': False}
2025-05-26 08:32:00,228 [INFO] __main__:188 (fetch) - Fetching URL: https://modelcontextprotocol.io
2025-05-26 08:32:00,535 [DEBUG] urllib3.connectionpool:1049 (_new_conn) - Starting new HTTPS connection (1): modelcontextprotocol.io:443
2025-05-26 08:32:00,680 [DEBUG] urllib3.connectionpool:544 (_make_request) - https://modelcontextprotocol.io:443 "GET / HTTP/1.1" 308 13
2025-05-26 08:32:00,747 [DEBUG] urllib3.connectionpool:544 (_make_request) - https://modelcontextprotocol.io:443 "GET /introduction HTTP/1.1" 200 None
2025-05-26 08:32:00,794 [INFO] __main__:204 (fetch) - Content truncated to 5000 characters
2025-05-26 08:32:00,794 [INFO] __main__:206 (fetch) - Successfully fetched 5000 characters from https://modelcontextprotocol.io
2025-05-26 08:32:00,794 [INFO] MCPLite.routes.ServerRoutes:274 (tools_call) - Returning tool response: CallToolResult + content: [TextContent(annotations=None, type='text', text="Introduction - Model Context Protocol\n\n[Model Context Protocol home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg)](/)\n\nSearch...\n\n- [Python SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n- [Java SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [C# SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Swift SDK](https://github.com/modelcontextprotocol/swift-sdk)\n\n##### Get Started\n\n* [Introduction](/introduction)\n* Quickstart\n* [Example Servers](/examples)\n* [Example Clients](/clients)\n* [FAQs](/faqs)\n\n##### Tutorials\n\n* [Building MCP with LLMs](/tutorials/building-mcp-with-llms)\n* [Debugging](/docs/tools/debugging)\n* [Inspector](/docs/tools/inspector)\n\n##### Concepts\n\n* [Core architecture](/docs/concepts/architecture)\n* [Resources](/docs/concepts/resources)\n* [Prompts](/docs/concepts/prompts)\n* [Tools](/docs/concepts/tools)\n* [Sampling](/docs/concepts/sampling)\n* [Roots](/docs/concepts/roots)\n* [Transports](/docs/concepts/transports)\n\n##### Development\n\n* [What's New](/development/updates)\n* [Roadmap](/development/roadmap)\n* [Contributing](/development/contributing)\n\n[Model Context Protocol home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg)](/)\n\nSearch...\n\nSearch...\n\nNavigation\n\nGet Started\n\nIntroduction\n\n[User Guide](/introduction)[SDKs](/sdk/java/mcp-overview)[Specification](/specification/2025-03-26)\n\n[User Guide](/introduction)[SDKs](/sdk/java/mcp-overview)[Specification](/specification/2025-03-26)\n\n- [GitHub](https://github.com/modelcontextprotocol)\n\nC# SDK released! Check out [what else is new.](/development/updates)\n\nMCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.\n\n## [\u200b](#why-mcp%3F) Why MCP?\n\nMCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides:\n\n* A growing list of pre-built integrations that your LLM can directly plug into\n* The flexibility to switch between LLM providers and vendors\n* Best practices for securing your data within your infrastructure\n\n### [\u200b](#general-architecture) General architecture\n\nAt its core, MCP follows a client-server architecture where a host application can connect to multiple servers:\n\n* **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP\n* **MCP Clients**: Protocol clients that maintain 1:1 connections with servers\n* **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol\n* **Local Data Sources**: Your computer’s files, databases, and services that MCP servers can securely access\n* **Remote Services**: External systems available over the internet (e.g., through APIs) that MCP servers can connect to\n\n## [\u200b](#get-started) Get started\n\nChoose the path that best fits your needs:\n\n#### [\u200b](#quick-starts) Quick Starts\n\n[## For Server Developers\n\nGet started building your own server to use in Claude for Desktop and other clients](/quickstart/server)[## For Client Developers\n\nGet started building your own client that can integrate with all MCP servers](/quickstart/client)[## For Claude Desktop Users\n\nGet started using pre-built servers in Claude for Desktop](/quickstart/user)\n\n#### [\u200b](#examples) Examples\n\n[## Example Servers\n\nCheck out our gallery of official MCP servers and implementations](/examples)[## Example Clients\n\nView the list of clients that support MCP integrations](/clients)\n\n## [\u200b](#tutorials) Tutorials\n\n[## Building MCP with LLMs\n\nLearn how to use LLMs like Claude to speed up your MCP development](/tutorials/building-mcp-with-llms)[## Debugging Guide\n\nLearn how to effectively debug MCP servers and integrations](/docs/tools/debugging)[## MCP Inspector\n\nTest and inspect your MCP servers with our interactive debugging tool](/docs/tools/inspector)[## MCP Workshop (Video, 2hr)](https://www.youtube.com/watch?v=kQmXtrmQ5Zg)\n\n## [\u200b](#explore-mcp) Explore MCP\n\nDive deeper into MCP’s core concepts and capabilities:\n\n[## Core architecture\n\nUnderstand how MCP connects clients, servers, and LLMs](/docs/concepts/architecture)[## Resources\n\nExpose data and content from your servers to LLMs](/docs/concepts/resources)[## Prompts\n\nCreate reusable prompt templates and workflows](/docs/concepts/prompts)[## Tools\n\nEnable LLMs to perform actions through your server](/docs/concepts/tools)[## Sampling\n\nLet your servers request c")]
2025-05-26 08:32:00,794 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'content': [{'annotations': None, 'type': 'text', 'text': "Introduction - Model Context Protocol\n\n[Model Context Protocol home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg)](/)\n\nSearch...\n\n- [Python SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n- [Java SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [C# SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Swift SDK](https://github.com/modelcontextprotocol/swift-sdk)\n\n##### Get Started\n\n* [Introduction](/introduction)\n* Quickstart\n* [Example Servers](/examples)\n* [Example Clients](/clients)\n* [FAQs](/faqs)\n\n##### Tutorials\n\n* [Building MCP with LLMs](/tutorials/building-mcp-with-llms)\n* [Debugging](/docs/tools/debugging)\n* [Inspector](/docs/tools/inspector)\n\n##### Concepts\n\n* [Core architecture](/docs/concepts/architecture)\n* [Resources](/docs/concepts/resources)\n* [Prompts](/docs/concepts/prompts)\n* [Tools](/docs/concepts/tools)\n* [Sampling](/docs/concepts/sampling)\n* [Roots](/docs/concepts/roots)\n* [Transports](/docs/concepts/transports)\n\n##### Development\n\n* [What's New](/development/updates)\n* [Roadmap](/development/roadmap)\n* [Contributing](/development/contributing)\n\n[Model Context Protocol home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg)](/)\n\nSearch...\n\nSearch...\n\nNavigation\n\nGet Started\n\nIntroduction\n\n[User Guide](/introduction)[SDKs](/sdk/java/mcp-overview)[Specification](/specification/2025-03-26)\n\n[User Guide](/introduction)[SDKs](/sdk/java/mcp-overview)[Specification](/specification/2025-03-26)\n\n- [GitHub](https://github.com/modelcontextprotocol)\n\nC# SDK released! Check out [what else is new.](/development/updates)\n\nMCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.\n\n## [\u200b](#why-mcp%3F) Why MCP?\n\nMCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides:\n\n* A growing list of pre-built integrations that your LLM can directly plug into\n* The flexibility to switch between LLM providers and vendors\n* Best practices for securing your data within your infrastructure\n\n### [\u200b](#general-architecture) General architecture\n\nAt its core, MCP follows a client-server architecture where a host application can connect to multiple servers:\n\n* **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP\n* **MCP Clients**: Protocol clients that maintain 1:1 connections with servers\n* **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol\n* **Local Data Sources**: Your computer’s files, databases, and services that MCP servers can securely access\n* **Remote Services**: External systems available over the internet (e.g., through APIs) that MCP servers can connect to\n\n## [\u200b](#get-started) Get started\n\nChoose the path that best fits your needs:\n\n#### [\u200b](#quick-starts) Quick Starts\n\n[## For Server Developers\n\nGet started building your own server to use in Claude for Desktop and other clients](/quickstart/server)[## For Client Developers\n\nGet started building your own client that can integrate with all MCP servers](/quickstart/client)[## For Claude Desktop Users\n\nGet started using pre-built servers in Claude for Desktop](/quickstart/user)\n\n#### [\u200b](#examples) Examples\n\n[## Example Servers\n\nCheck out our gallery of official MCP servers and implementations](/examples)[## Example Clients\n\nView the list of clients that support MCP integrations](/clients)\n\n## [\u200b](#tutorials) Tutorials\n\n[## Building MCP with LLMs\n\nLearn how to use LLMs like Claude to speed up your MCP development](/tutorials/building-mcp-with-llms)[## Debugging Guide\n\nLearn how to effectively debug MCP servers and integrations](/docs/tools/debugging)[## MCP Inspector\n\nTest and inspect your MCP servers with our interactive debugging tool](/docs/tools/inspector)[## MCP Workshop (Video, 2hr)](https://www.youtube.com/watch?v=kQmXtrmQ5Zg)\n\n## [\u200b](#explore-mcp) Explore MCP\n\nDive deeper into MCP’s core concepts and capabilities:\n\n[## Core architecture\n\nUnderstand how MCP connects clients, servers, and LLMs](/docs/concepts/architecture)[## Resources\n\nExpose data and content from your servers to LLMs](/docs/concepts/resources)[## Prompts\n\nCreate reusable prompt templates and workflows](/docs/concepts/prompts)[## Tools\n\nEnable LLMs to perform actions through your server](/docs/concepts/tools)[## Sampling\n\nLet your servers request c"}], 'isError': False}
2025-05-26 08:33:14,107 [INFO] MCPLite.transport.StdioTransport:169 (read_json_message) - No JSON message received.
