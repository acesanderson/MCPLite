2025-05-15 10:08:08,374 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-15 10:08:08,739 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-15 10:08:08,739 [INFO] mcplite:44 (<module>) - Initializing MCPLite application
2025-05-15 10:08:09,500 [DEBUG] instructor:127 (patch) - Patching `client.chat.completions.create` with mode=<Mode.TOOLS: 'tool_call'>
2025-05-15 10:08:09,539 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-15 10:08:09,778 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-15 10:08:09,809 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-15 10:08:09,812 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:51:54,028 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-26 06:51:54,380 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-26 06:51:54,380 [INFO] mcplite:44 (<module>) - Initializing MCPLite application
2025-05-26 06:51:55,093 [DEBUG] instructor:127 (patch) - Patching `client.chat.completions.create` with mode=<Mode.TOOLS: 'tool_call'>
2025-05-26 06:51:55,131 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:51:55,359 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:51:55,387 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:51:55,388 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:52:31,444 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-26 06:52:31,783 [INFO] mcplite:95 (configure_logging) - Logging configured with level: DEBUG, trace_mode: True
2025-05-26 06:52:31,783 [INFO] mcplite:44 (<module>) - Initializing MCPLite application
2025-05-26 06:52:32,492 [DEBUG] instructor:127 (patch) - Patching `client.chat.completions.create` with mode=<Mode.TOOLS: 'tool_call'>
2025-05-26 06:52:32,529 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:52:32,760 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:52:32,788 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:52:32,789 [INFO] googleapiclient.discovery_cache:49 (autodetect) - file_cache is only supported with oauth2client<4.0.0
2025-05-26 06:52:32,791 [INFO] mcplite:29 (<module>) - Initializing MCPLite application
2025-05-26 06:52:32,791 [DEBUG] mcplite:142 (resource) - Detected regular resource.
2025-05-26 06:52:32,791 [DEBUG] mcplite:138 (resource) - Detected resource template.
2025-05-26 06:52:32,791 [INFO] MCPLite.client.Client:56 (initialize) - Client initializing
2025-05-26 06:52:32,791 [INFO] MCPLite.client.Client:59 (initialize) - Client sending InitializeRequest
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,792 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"36ae260ffd884efeb34c2b4a318fa314","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"36ae260ffd884efeb34c2b4a318fa314","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}
2025-05-26 06:52:32,792 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"capabilities":{"experimental":null,"logging":null,"prompts":{"listChanged":true},"resources":{"listChanged":true,"subscribe":true},"tools":{"listChanged":false}},"protocolVersion":"1.0.0","serverInfo":{"name":"MyMinimalServer","version":"0.1.0"},"instructions":null}}; returning to client.
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"capabilities":{"experimental":null,"logging":null,"prompts":{"listChanged":true},"resources":{"listChanged":true,"subscribe":true},"tools":{"listChanged":false}},"protocolVersion":"1.0.0","serverInfo":{"name":"MyMinimalServer","version":"0.1.0"},"instructions":null}}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None capabilities=ServerCapabilities(experimental=None, logging=None, prompts={'listChanged': True}, resources={'listChanged': True, 'subscribe': True}, tools={'listChanged': False}) protocolVersion='1.0.0' serverInfo=Implementation(name='MyMinimalServer', version='0.1.0') instructions=None
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:65 (initialize) - Client received InitializeResult
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:72 (initialize) - Client sending ListResourcesRequest
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,792 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"ad4587913318403c89bd5acfc499172b","method":"resources/list","params":null}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"ad4587913318403c89bd5acfc499172b","method":"resources/list","params":null}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/list' params=None
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/list' params=None
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:147 (resources_list) - Routed to resources_list route: method='resources/list' params=None
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:153 (resources_list) - Returning resource list: [ResourceDefinition(uri='names://sheepadoodle', name='name_of_sheepadoodle', description='Returns the name of the sheepadoodle.', mimeType='text/plain', size=1024)]
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}
2025-05-26 06:52:32,792 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resources":[{"uri":"names://sheepadoodle","name":"name_of_sheepadoodle","description":"Returns the name of the sheepadoodle.","mimeType":"text/plain","size":1024}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resources":[{"uri":"names://sheepadoodle","name":"name_of_sheepadoodle","description":"Returns the name of the sheepadoodle.","mimeType":"text/plain","size":1024}],"nextCursor":null}}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None resources=[ResourceDefinition(uri='names://sheepadoodle', name='name_of_sheepadoodle', description='Returns the name of the sheepadoodle.', mimeType='text/plain', size=1024)] nextCursor=None
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:77 (initialize) - Client received ListResourcesResult
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:79 (initialize) - Client updated registry with resources
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:81 (initialize) - Client sending ListResourcesTemplateRequest
2025-05-26 06:52:32,792 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,792 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"3f7c91a1508a492eaa2cf179ab736c44","method":"resources/templates/list","params":null}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"3f7c91a1508a492eaa2cf179ab736c44","method":"resources/templates/list","params":null}
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,792 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/templates/list' params=None
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/templates/list' params=None
2025-05-26 06:52:32,792 [INFO] MCPLite.routes.ServerRoutes:160 (resources_templates_list) - Routed to resources_templates_list route: method='resources/templates/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:166 (resources_templates_list) - Returning resource template list: [ResourceTemplateDefinition(uriTemplate='file://todos/{date}', name='todos', description='Returns a list of todos for a given date. Requires YYYY-MM-DD format.', mimeType='text/plain')]
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resourceTemplates":[{"uriTemplate":"file://todos/{date}","name":"todos","description":"Returns a list of todos for a given date. Requires YYYY-MM-DD format.","mimeType":"text/plain"}]}}; returning to client.
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resourceTemplates":[{"uriTemplate":"file://todos/{date}","name":"todos","description":"Returns a list of todos for a given date. Requires YYYY-MM-DD format.","mimeType":"text/plain"}]}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None resourceTemplates=[ResourceTemplateDefinition(uriTemplate='file://todos/{date}', name='todos', description='Returns a list of todos for a given date. Requires YYYY-MM-DD format.', mimeType='text/plain')]
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:86 (initialize) - Client received ListResourcesTemplateResult
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:89 (initialize) - Client sending ListToolsRequest
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"d3e9a68d409d4f198b73e3981df0ff41","method":"tools/list","params":null}
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"d3e9a68d409d4f198b73e3981df0ff41","method":"tools/list","params":null}
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='tools/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='tools/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:291 (tools_list) - Routed to tools_list route: method='tools/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:295 (tools_list) - Returning tool list: [ToolDefinition(name='add', description='Add two numbers.', inputSchema=InputSchema(type='object', properties={'a': 'int', 'b': 'int'}))]
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"tools":[{"name":"add","description":"Add two numbers.","inputSchema":{"type":"object","properties":{"a":"int","b":"int"}}}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"tools":[{"name":"add","description":"Add two numbers.","inputSchema":{"type":"object","properties":{"a":"int","b":"int"}}}],"nextCursor":null}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None tools=[ToolDefinition(name='add', description='Add two numbers.', inputSchema=InputSchema(type='object', properties={'a': 'int', 'b': 'int'}))] nextCursor=None
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:92 (initialize) - Client received ListResourcesResult
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:94 (initialize) - Client updated registry with resources
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:96 (initialize) - Client sending ListPromptsRequest
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"07158ba673e74469ae7f75b1d5c364ac","method":"prompts/list","params":null}
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"07158ba673e74469ae7f75b1d5c364ac","method":"prompts/list","params":null}
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='prompts/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='prompts/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:132 (prompts_list) - Routed to prompts_list route: method='prompts/list' params=None
2025-05-26 06:52:32,793 [INFO] MCPLite.routes.ServerRoutes:136 (prompts_list) - Returning prompt list: [PromptDefinition(name='partner', description='Suggest some endorsing partners for a given topic.', arguments=[Argument(name='topic', description='', required=True)])]
2025-05-26 06:52:32,793 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"prompts":[{"name":"partner","description":"Suggest some endorsing partners for a given topic.","arguments":[{"name":"topic","description":"","required":true}]}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"prompts":[{"name":"partner","description":"Suggest some endorsing partners for a given topic.","arguments":[{"name":"topic","description":"","required":true}]}],"nextCursor":null}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None prompts=[PromptDefinition(name='partner', description='Suggest some endorsing partners for a given topic.', arguments=[Argument(name='topic', description='', required=True)])] nextCursor=None
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:101 (initialize) - Client received ListPromptsResult
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:103 (initialize) - Client updated registry with prompts
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:106 (initialize) - Client sending InitializedNotification
2025-05-26 06:52:32,793 [INFO] MCPLite.client.Client:145 (send_notification) - Client sending JSON-RPC notification through transport
2025-05-26 06:52:32,793 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:86 (process_message) - Valid JSON-RPC notification, processing...
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:126 (_process_notification) - Routing notification: method='notifications/initialized' params={}
2025-05-26 06:52:32,794 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='notifications/initialized' params={}
2025-05-26 06:52:32,794 [INFO] MCPLite.routes.ServerRoutes:66 (initialized) - Received initialized notification - MCP handshake complete
2025-05-26 06:52:32,794 [INFO] MCPLite.routes.ServerRoutes:74 (initialized) - Server fully initialized at 2025-05-26 06:52:32.794130
2025-05-26 06:52:32,794 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"jsonrpc": "2.0", "method": "notifications/initialized", "params": {}}; returning to client.
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:56 (initialize) - Client initializing
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:59 (initialize) - Client sending InitializeRequest
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,794 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"a8222d5bd840415c983c0cd7dad461cf","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"a8222d5bd840415c983c0cd7dad461cf","method":"initialize","params":{"capabilities":{"experimental":null,"roots":null,"sampling":null},"clientInfo":{"name":"MyMinimalClient","version":"0.1.0"},"protocolVersion":"1.0.0"}}
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 06:52:32,794 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='initialize' params=InitializeRequestParams(capabilities=ClientCapabilities(experimental=None, roots=None, sampling=None), clientInfo=Implementation(name='MyMinimalClient', version='0.1.0'), protocolVersion='1.0.0')
2025-05-26 06:52:32,794 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}
2025-05-26 06:52:32,794 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"capabilities":{"experimental":null,"logging":null,"prompts":{"listChanged":true},"resources":{"listChanged":true,"subscribe":true},"tools":{"listChanged":false}},"protocolVersion":"1.0.0","serverInfo":{"name":"MyMinimalServer","version":"0.1.0"},"instructions":null}}; returning to client.
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"capabilities":{"experimental":null,"logging":null,"prompts":{"listChanged":true},"resources":{"listChanged":true,"subscribe":true},"tools":{"listChanged":false}},"protocolVersion":"1.0.0","serverInfo":{"name":"MyMinimalServer","version":"0.1.0"},"instructions":null}}
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}}
2025-05-26 06:52:32,794 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'capabilities': {'experimental': None, 'logging': None, 'prompts': {'listChanged': True}, 'resources': {'listChanged': True, 'subscribe': True}, 'tools': {'listChanged': False}}, 'protocolVersion': '1.0.0', 'serverInfo': {'name': 'MyMinimalServer', 'version': '0.1.0'}, 'instructions': None}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None capabilities=ServerCapabilities(experimental=None, logging=None, prompts={'listChanged': True}, resources={'listChanged': True, 'subscribe': True}, tools={'listChanged': False}) protocolVersion='1.0.0' serverInfo=Implementation(name='MyMinimalServer', version='0.1.0') instructions=None
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:65 (initialize) - Client received InitializeResult
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:72 (initialize) - Client sending ListResourcesRequest
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"d64399e70d2e4b87b36a35feb5a3244c","method":"resources/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"d64399e70d2e4b87b36a35feb5a3244c","method":"resources/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:147 (resources_list) - Routed to resources_list route: method='resources/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:153 (resources_list) - Returning resource list: [ResourceDefinition(uri='names://sheepadoodle', name='name_of_sheepadoodle', description='Returns the name of the sheepadoodle.', mimeType='text/plain', size=1024)]
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resources":[{"uri":"names://sheepadoodle","name":"name_of_sheepadoodle","description":"Returns the name of the sheepadoodle.","mimeType":"text/plain","size":1024}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resources":[{"uri":"names://sheepadoodle","name":"name_of_sheepadoodle","description":"Returns the name of the sheepadoodle.","mimeType":"text/plain","size":1024}],"nextCursor":null}}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'resources': [{'uri': 'names://sheepadoodle', 'name': 'name_of_sheepadoodle', 'description': 'Returns the name of the sheepadoodle.', 'mimeType': 'text/plain', 'size': 1024}], 'nextCursor': None}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None resources=[ResourceDefinition(uri='names://sheepadoodle', name='name_of_sheepadoodle', description='Returns the name of the sheepadoodle.', mimeType='text/plain', size=1024)] nextCursor=None
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:77 (initialize) - Client received ListResourcesResult
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:79 (initialize) - Client updated registry with resources
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:81 (initialize) - Client sending ListResourcesTemplateRequest
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"c1032526c6c84e70847a0bbc95ee8312","method":"resources/templates/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"c1032526c6c84e70847a0bbc95ee8312","method":"resources/templates/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/templates/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/templates/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:160 (resources_templates_list) - Routed to resources_templates_list route: method='resources/templates/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:166 (resources_templates_list) - Returning resource template list: [ResourceTemplateDefinition(uriTemplate='file://todos/{date}', name='todos', description='Returns a list of todos for a given date. Requires YYYY-MM-DD format.', mimeType='text/plain')]
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resourceTemplates":[{"uriTemplate":"file://todos/{date}","name":"todos","description":"Returns a list of todos for a given date. Requires YYYY-MM-DD format.","mimeType":"text/plain"}]}}; returning to client.
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resourceTemplates":[{"uriTemplate":"file://todos/{date}","name":"todos","description":"Returns a list of todos for a given date. Requires YYYY-MM-DD format.","mimeType":"text/plain"}]}}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'resourceTemplates': [{'uriTemplate': 'file://todos/{date}', 'name': 'todos', 'description': 'Returns a list of todos for a given date. Requires YYYY-MM-DD format.', 'mimeType': 'text/plain'}]}
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None resourceTemplates=[ResourceTemplateDefinition(uriTemplate='file://todos/{date}', name='todos', description='Returns a list of todos for a given date. Requires YYYY-MM-DD format.', mimeType='text/plain')]
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:86 (initialize) - Client received ListResourcesTemplateResult
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:89 (initialize) - Client sending ListToolsRequest
2025-05-26 06:52:32,795 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"f1fa2d0c216e482792fe8196ed745646","method":"tools/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"f1fa2d0c216e482792fe8196ed745646","method":"tools/list","params":null}
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='tools/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='tools/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:291 (tools_list) - Routed to tools_list route: method='tools/list' params=None
2025-05-26 06:52:32,795 [INFO] MCPLite.routes.ServerRoutes:295 (tools_list) - Returning tool list: [ToolDefinition(name='add', description='Add two numbers.', inputSchema=InputSchema(type='object', properties={'a': 'int', 'b': 'int'}))]
2025-05-26 06:52:32,795 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}
2025-05-26 06:52:32,795 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"tools":[{"name":"add","description":"Add two numbers.","inputSchema":{"type":"object","properties":{"a":"int","b":"int"}}}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"tools":[{"name":"add","description":"Add two numbers.","inputSchema":{"type":"object","properties":{"a":"int","b":"int"}}}],"nextCursor":null}}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'tools': [{'name': 'add', 'description': 'Add two numbers.', 'inputSchema': {'type': 'object', 'properties': {'a': 'int', 'b': 'int'}}}], 'nextCursor': None}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None tools=[ToolDefinition(name='add', description='Add two numbers.', inputSchema=InputSchema(type='object', properties={'a': 'int', 'b': 'int'}))] nextCursor=None
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:92 (initialize) - Client received ListResourcesResult
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:94 (initialize) - Client updated registry with resources
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:96 (initialize) - Client sending ListPromptsRequest
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:32,796 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"d49a210d055e46049407f2b54200c2d9","method":"prompts/list","params":null}
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"d49a210d055e46049407f2b54200c2d9","method":"prompts/list","params":null}
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='prompts/list' params=None
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='prompts/list' params=None
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:132 (prompts_list) - Routed to prompts_list route: method='prompts/list' params=None
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:136 (prompts_list) - Returning prompt list: [PromptDefinition(name='partner', description='Suggest some endorsing partners for a given topic.', arguments=[Argument(name='topic', description='', required=True)])]
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}
2025-05-26 06:52:32,796 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"prompts":[{"name":"partner","description":"Suggest some endorsing partners for a given topic.","arguments":[{"name":"topic","description":"","required":true}]}],"nextCursor":null}}; returning to client.
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"prompts":[{"name":"partner","description":"Suggest some endorsing partners for a given topic.","arguments":[{"name":"topic","description":"","required":true}]}],"nextCursor":null}}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'prompts': [{'name': 'partner', 'description': 'Suggest some endorsing partners for a given topic.', 'arguments': [{'name': 'topic', 'description': '', 'required': True}]}], 'nextCursor': None}
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None prompts=[PromptDefinition(name='partner', description='Suggest some endorsing partners for a given topic.', arguments=[Argument(name='topic', description='', required=True)])] nextCursor=None
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:101 (initialize) - Client received ListPromptsResult
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:103 (initialize) - Client updated registry with prompts
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:106 (initialize) - Client sending InitializedNotification
2025-05-26 06:52:32,796 [INFO] MCPLite.client.Client:145 (send_notification) - Client sending JSON-RPC notification through transport
2025-05-26 06:52:32,796 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","method":"notifications/initialized","params":{}}
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:86 (process_message) - Valid JSON-RPC notification, processing...
2025-05-26 06:52:32,796 [INFO] MCPLite.server.Server:126 (_process_notification) - Routing notification: method='notifications/initialized' params={}
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='notifications/initialized' params={}
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:66 (initialized) - Received initialized notification - MCP handshake complete
2025-05-26 06:52:32,796 [INFO] MCPLite.routes.ServerRoutes:74 (initialized) - Server fully initialized at 2025-05-26 06:52:32.796638
2025-05-26 06:52:32,796 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"jsonrpc": "2.0", "method": "notifications/initialized", "params": {}}; returning to client.
2025-05-26 06:52:32,811 [DEBUG] instructor:48 (initialize_retrying) - max_retries: 3
2025-05-26 06:52:32,811 [DEBUG] instructor:136 (retry_sync) - Retrying, attempt: 1
2025-05-26 06:52:32,812 [DEBUG] openai._base_client:482 (_build_request) - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-04a1f728-fcba-46fb-8cc0-3e967fa123ae', 'json_data': {'messages': [{'role': 'system', 'content': 'You have access to one or more of following capabilities through the MCP framework:\n\nTOOLS - Functions you can call to perform actions\n   - Use tools when you need to execute operations or compute something\n   - Each tool has a name, description, and defined parameters\n   - To call a tool, use the format:\n     ```\n     {\n       "method": "tools/call",\n       "params": {\n\t       "name": "tool_name",\n\t       "arguments": {\n\t\t "param1": "value1",\n\t\t "param2": "value2"\n\t       }\n\t}\n     }\n     ```\n\n\nRESOURCES - Sources of information you can access\n   - Use resources when you need to retrieve information\n   - Resources are accessed via URI patterns that may be static or templated\n   - To read a resource, use the format:\n     ```\n     {\n       "method": "resources/read",\n       "params":\n\t       {"uri": "resource://example"}\n     }\n     ```\n\nRESOURCE TEMPLATES - Dynamic resources with parameterized URIs\n   - Resource templates allow accessing resources with variable parts in the URI\n   - Templates use curly braces {} to denote parameters that must be filled\n   - To read a templated resource, substitute the parameters directly into the URI:\n     ```\n     {\n       "method": "resources/read",\n       "params": {\n         "uri": "resource://example/value1/value2"\n       }\n     }\n     ```\n   - Template parameters:\n     - Must be substituted directly into the URI template before making the request\n     - Replace each {parameter} with its actual value\n     - The resulting URI should be a concrete path with no template variables\n   - Examples:\n     - Template: `file://todos/{date}` → Usage: `{"method": "resources/read", "params": {"uri": "file://todos/2025-05-03"}}`\n     - Template: `db://users/{userId}/profile` → Usage: `{"method": "resources/read", "params": {"uri": "db://users/123/profile"}}`\n\n\nPROMPTS - Pre-defined templates that users can select for specific interactions\n   - IMPORTANT: Prompts are user-controlled and cannot be directly requested by you (the AI)\n   - You should be aware that prompts exist as an MCP capability, but only mention them if relevant\n   - Users will select prompts through the interface, not through your suggestions \n   - If available prompts are listed, you can explain their purpose if asked\n\nWhen you need to use any capability:\n1. First determine whether you need a Tool, Resource, or Prompt\n2. Format your request using the correct structure as shown above\n3. For tools, acknowledge that human approval may be required\n4. If an error occurs, try different parameters or an alternative approach\n5. Report on whether the capability was successfully used\n\nThe system will handle formatting your request into a proper JSON-RPC message, execute it, and return the results, which you should incorporate into your response appropriately.\n\nIf you have a final answer, wrap it in xml tags like this:\n<answer></answer>\n\n\nYou have access to the following tools:\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n\n\nYou have access to the following resources:\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n\n\nYou have access to the following resource templates:\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n\n\nThe user has access to the following prompts:\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n\n\nRemember to wrap your final answer in <answer> tags.'}, {'role': 'user', 'content': 'What were my todos for May 3 2025?'}], 'model': 'o4-mini'}}
2025-05-26 06:52:32,814 [DEBUG] openai._base_client:965 (request) - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-26 06:52:32,814 [DEBUG] httpcore.connection:45 (trace) - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-26 06:52:32,866 [DEBUG] httpcore.connection:45 (trace) - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a02c9500a10>
2025-05-26 06:52:32,867 [DEBUG] httpcore.connection:45 (trace) - start_tls.started ssl_context=<ssl.SSLContext object at 0x7a03155689d0> server_hostname='api.openai.com' timeout=5.0
2025-05-26 06:52:32,902 [DEBUG] httpcore.connection:45 (trace) - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a031558df40>
2025-05-26 06:52:32,903 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.started request=<Request [b'POST']>
2025-05-26 06:52:32,903 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.complete
2025-05-26 06:52:32,903 [DEBUG] httpcore.http11:45 (trace) - send_request_body.started request=<Request [b'POST']>
2025-05-26 06:52:32,904 [DEBUG] httpcore.http11:45 (trace) - send_request_body.complete
2025-05-26 06:52:32,904 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.started request=<Request [b'POST']>
2025-05-26 06:52:36,683 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 26 May 2025 11:52:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-yt5gmdycbwqiyiljkp9f4xxo'), (b'openai-processing-ms', b'3118'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3129'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'4000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'3998897'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'16ms'), (b'x-request-id', b'req_5ff59b344265d2666ca2c8efb606ed54'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=AxCwomfAyMhAWKLylwhsTqxun9Y2p00Wrw_7Tnic7qA-1748260356-1.0.1.1-6POMayzeme1wxMDIGxztPT2e1mllIC9D4od9GC9f6.KR.iY33H0XTAuqQeQ0bBbpa.GKkX5NW8mWeXKyfrgGk9OqUvWoHnnM_fu361muS5s; path=/; expires=Mon, 26-May-25 12:22:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=Jgx5QFZH6XYBSRWdc97.S8i1P4KLLE07T.i23UZDmXI-1748260356668-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'945d1125bca44cb8-MSP'), (b'Content-Encoding', b'br'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-26 06:52:36,685 [INFO] httpx:1025 (_send_single_request) - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-26 06:52:36,686 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.started request=<Request [b'POST']>
2025-05-26 06:52:36,686 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.complete
2025-05-26 06:52:36,687 [DEBUG] httpcore.http11:45 (trace) - response_closed.started
2025-05-26 06:52:36,687 [DEBUG] httpcore.http11:45 (trace) - response_closed.complete
2025-05-26 06:52:36,687 [DEBUG] openai._base_client:1003 (request) - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 26 May 2025 11:52:36 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-yt5gmdycbwqiyiljkp9f4xxo'), ('openai-processing-ms', '3118'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3129'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '4000000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '3998897'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '16ms'), ('x-request-id', 'req_5ff59b344265d2666ca2c8efb606ed54'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=AxCwomfAyMhAWKLylwhsTqxun9Y2p00Wrw_7Tnic7qA-1748260356-1.0.1.1-6POMayzeme1wxMDIGxztPT2e1mllIC9D4od9GC9f6.KR.iY33H0XTAuqQeQ0bBbpa.GKkX5NW8mWeXKyfrgGk9OqUvWoHnnM_fu361muS5s; path=/; expires=Mon, 26-May-25 12:22:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=Jgx5QFZH6XYBSRWdc97.S8i1P4KLLE07T.i23UZDmXI-1748260356668-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '945d1125bca44cb8-MSP'), ('content-encoding', 'br'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-26 06:52:36,687 [DEBUG] openai._base_client:1011 (request) - request_id: req_5ff59b344265d2666ca2c8efb606ed54
2025-05-26 06:52:36,737 [DEBUG] instructor:134 (process_response) - Instructor Raw Response: ChatCompletion(id='chatcmpl-BbQfZsdq0kctfwZmqWyh7KD8Z9skM', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{"method":"resources/read","params":{"uri":"file://todos/2025-05-03"}}', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1748260353, model='o4-mini-2025-04-16', object='chat.completion', service_tier='default', system_fingerprint=None, usage=CompletionUsage(completion_tokens=191, prompt_tokens=1060, total_tokens=1251, completion_tokens_details=None, prompt_tokens_details=None))
2025-05-26 06:52:36,737 [DEBUG] instructor:139 (process_response) - No response model, returning response as is
2025-05-26 06:52:36,737 [DEBUG] instructor:48 (initialize_retrying) - max_retries: 3
2025-05-26 06:52:36,737 [DEBUG] instructor:136 (retry_sync) - Retrying, attempt: 1
2025-05-26 06:52:36,738 [DEBUG] openai._base_client:482 (_build_request) - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-18d8fa13-b4af-4b6a-960c-97897a838d99', 'json_data': {'messages': [{'role': 'system', 'content': 'You have access to one or more of following capabilities through the MCP framework:\n\nTOOLS - Functions you can call to perform actions\n   - Use tools when you need to execute operations or compute something\n   - Each tool has a name, description, and defined parameters\n   - To call a tool, use the format:\n     ```\n     {\n       "method": "tools/call",\n       "params": {\n\t       "name": "tool_name",\n\t       "arguments": {\n\t\t "param1": "value1",\n\t\t "param2": "value2"\n\t       }\n\t}\n     }\n     ```\n\n\nRESOURCES - Sources of information you can access\n   - Use resources when you need to retrieve information\n   - Resources are accessed via URI patterns that may be static or templated\n   - To read a resource, use the format:\n     ```\n     {\n       "method": "resources/read",\n       "params":\n\t       {"uri": "resource://example"}\n     }\n     ```\n\nRESOURCE TEMPLATES - Dynamic resources with parameterized URIs\n   - Resource templates allow accessing resources with variable parts in the URI\n   - Templates use curly braces {} to denote parameters that must be filled\n   - To read a templated resource, substitute the parameters directly into the URI:\n     ```\n     {\n       "method": "resources/read",\n       "params": {\n         "uri": "resource://example/value1/value2"\n       }\n     }\n     ```\n   - Template parameters:\n     - Must be substituted directly into the URI template before making the request\n     - Replace each {parameter} with its actual value\n     - The resulting URI should be a concrete path with no template variables\n   - Examples:\n     - Template: `file://todos/{date}` → Usage: `{"method": "resources/read", "params": {"uri": "file://todos/2025-05-03"}}`\n     - Template: `db://users/{userId}/profile` → Usage: `{"method": "resources/read", "params": {"uri": "db://users/123/profile"}}`\n\n\nPROMPTS - Pre-defined templates that users can select for specific interactions\n   - IMPORTANT: Prompts are user-controlled and cannot be directly requested by you (the AI)\n   - You should be aware that prompts exist as an MCP capability, but only mention them if relevant\n   - Users will select prompts through the interface, not through your suggestions \n   - If available prompts are listed, you can explain their purpose if asked\n\nWhen you need to use any capability:\n1. First determine whether you need a Tool, Resource, or Prompt\n2. Format your request using the correct structure as shown above\n3. For tools, acknowledge that human approval may be required\n4. If an error occurs, try different parameters or an alternative approach\n5. Report on whether the capability was successfully used\n\nThe system will handle formatting your request into a proper JSON-RPC message, execute it, and return the results, which you should incorporate into your response appropriately.\n\nIf you have a final answer, wrap it in xml tags like this:\n<answer></answer>\n\n\nYou have access to the following tools:\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n\n\nYou have access to the following resources:\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n\n\nYou have access to the following resource templates:\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n\n\nThe user has access to the following prompts:\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n\n\nRemember to wrap your final answer in <answer> tags.'}, {'role': 'user', 'content': 'What were my todos for May 3 2025?'}], 'model': 'o4-mini', 'stream': True}}
2025-05-26 06:52:36,738 [DEBUG] openai._base_client:965 (request) - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-26 06:52:36,738 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.started request=<Request [b'POST']>
2025-05-26 06:52:36,738 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.complete
2025-05-26 06:52:36,739 [DEBUG] httpcore.http11:45 (trace) - send_request_body.started request=<Request [b'POST']>
2025-05-26 06:52:36,739 [DEBUG] httpcore.http11:45 (trace) - send_request_body.complete
2025-05-26 06:52:36,739 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.started request=<Request [b'POST']>
2025-05-26 06:52:39,794 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 26 May 2025 11:52:39 GMT'), (b'Content-Type', b'text/event-stream; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-yt5gmdycbwqiyiljkp9f4xxo'), (b'openai-processing-ms', b'2927'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2930'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'4000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'3998897'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'16ms'), (b'x-request-id', b'req_6a2955d77c09823d9b186b547332f7d7'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'945d113db8684cb8-MSP'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-26 06:52:39,795 [INFO] httpx:1025 (_send_single_request) - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-26 06:52:39,795 [DEBUG] openai._base_client:1003 (request) - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 26 May 2025 11:52:39 GMT', 'content-type': 'text/event-stream; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-yt5gmdycbwqiyiljkp9f4xxo', 'openai-processing-ms': '2927', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2930', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '4000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '3998897', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '16ms', 'x-request-id': 'req_6a2955d77c09823d9b186b547332f7d7', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '945d113db8684cb8-MSP', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-26 06:52:39,795 [DEBUG] openai._base_client:1011 (request) - request_id: req_6a2955d77c09823d9b186b547332f7d7
2025-05-26 06:52:39,795 [DEBUG] instructor:160 (update_total_usage) - No compatible response.usage found, token usage not updated.
2025-05-26 06:52:39,795 [DEBUG] instructor:134 (process_response) - Instructor Raw Response: <openai.Stream object at 0x7a031aa6d430>
2025-05-26 06:52:39,796 [DEBUG] instructor:139 (process_response) - No response model, returning response as is
2025-05-26 06:52:39,796 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.started request=<Request [b'POST']>
2025-05-26 06:52:39,870 [DEBUG] httpcore.http11:45 (trace) - response_closed.started
2025-05-26 06:52:39,870 [DEBUG] httpcore.http11:45 (trace) - response_closed.complete
2025-05-26 06:52:39,873 [INFO] MCPLite.client.Client:117 (send_request) - Client sending JSON-RPC request through transport
2025-05-26 06:52:39,873 [INFO] MCPLite.transport.DirectTransport:32 (send_json_message) - Sending JSON from transport to server: {"jsonrpc":"2.0","id":"af8b998546444374b700b2a14170c5db","method":"resources/read","params":{"uri":"file://todos/2025-05-03"}}
2025-05-26 06:52:39,874 [INFO] MCPLite.server.Server:57 (process_message) - Server received JSON: {"jsonrpc":"2.0","id":"af8b998546444374b700b2a14170c5db","method":"resources/read","params":{"uri":"file://todos/2025-05-03"}}
2025-05-26 06:52:39,874 [INFO] MCPLite.server.Server:80 (process_message) - Valid JSON-RPC request, processing...
2025-05-26 06:52:39,874 [INFO] MCPLite.server.Server:112 (_process_request) - Routing request: method='resources/read' params=ReadResourceRequestParams(uri='file://todos/2025-05-03')
2025-05-26 06:52:39,874 [INFO] MCPLite.routes.ServerRoutes:47 (__call__) - Routing request: method='resources/read' params=ReadResourceRequestParams(uri='file://todos/2025-05-03')
2025-05-26 06:52:39,874 [INFO] MCPLite.routes.ServerRoutes:180 (resources_read) - Routed to resources_read route: method='resources/read' params=ReadResourceRequestParams(uri='file://todos/2025-05-03')
2025-05-26 06:52:39,874 [INFO] MCPLite.routes.ServerRoutes:214 (resources_read) - Reading resource template: {resource_template.uriTemplate}
2025-05-26 06:52:39,887 [INFO] MCPLite.routes.ServerRoutes:226 (resources_read) - Returning resource template content: uri='file://todos/2025-05-03' contents=TextResourceContents(text='- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n', uri='file://todos/2025-05-03', mimeType='text/plain')
2025-05-26 06:52:39,887 [INFO] MCPLite.server.Server:119 (_process_request) - Server sending JSON-RPC response: id='blah' jsonrpc='2.0' result={'meta': None, 'resource': {'uri': 'file://todos/2025-05-03', 'contents': {'text': '- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n', 'uri': 'file://todos/2025-05-03', 'mimeType': 'text/plain'}}}
2025-05-26 06:52:39,887 [INFO] MCPLite.transport.DirectTransport:35 (send_json_message) - Transport received JSON response from server: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resource":{"uri":"file://todos/2025-05-03","contents":{"text":"- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n","uri":"file://todos/2025-05-03","mimeType":"text/plain"}}}}; returning to client.
2025-05-26 06:52:39,887 [INFO] MCPLite.client.Client:119 (send_request) - Client received JSON-RPC response from transport: {"id":"blah","jsonrpc":"2.0","result":{"meta":null,"resource":{"uri":"file://todos/2025-05-03","contents":{"text":"- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n","uri":"file://todos/2025-05-03","mimeType":"text/plain"}}}}
2025-05-26 06:52:39,887 [INFO] MCPLite.client.Client:124 (send_request) - Client parsing JSON-RPC response: {'id': 'blah', 'jsonrpc': '2.0', 'result': {'meta': None, 'resource': {'uri': 'file://todos/2025-05-03', 'contents': {'text': '- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n', 'uri': 'file://todos/2025-05-03', 'mimeType': 'text/plain'}}}}
2025-05-26 06:52:39,888 [INFO] MCPLite.client.Client:126 (send_request) - Client converting JSON-RPC response to MCPResult object: id='blah' jsonrpc='2.0' result={'meta': None, 'resource': {'uri': 'file://todos/2025-05-03', 'contents': {'text': '- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n', 'uri': 'file://todos/2025-05-03', 'mimeType': 'text/plain'}}}
2025-05-26 06:52:39,888 [INFO] MCPLite.client.Client:130 (send_request) - Client converted JSON-RPC response to MCPResult object: meta=None resource=ResourceContents(uri='file://todos/2025-05-03', contents=TextResourceContents(text='- [ ] Finances\n    - [ ] Set up financial planner appt\n    - [ ] Boston city fees\n    - [ ] Budget\n', uri='file://todos/2025-05-03', mimeType='text/plain'))
2025-05-26 06:52:39,892 [DEBUG] instructor:48 (initialize_retrying) - max_retries: 3
2025-05-26 06:52:39,892 [DEBUG] instructor:136 (retry_sync) - Retrying, attempt: 1
2025-05-26 06:52:39,894 [DEBUG] openai._base_client:482 (_build_request) - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f2b14d32-e8d8-442f-bd2c-821b3d816725', 'json_data': {'messages': [{'role': 'system', 'content': 'You have access to one or more of following capabilities through the MCP framework:\n\nTOOLS - Functions you can call to perform actions\n   - Use tools when you need to execute operations or compute something\n   - Each tool has a name, description, and defined parameters\n   - To call a tool, use the format:\n     ```\n     {\n       "method": "tools/call",\n       "params": {\n\t       "name": "tool_name",\n\t       "arguments": {\n\t\t "param1": "value1",\n\t\t "param2": "value2"\n\t       }\n\t}\n     }\n     ```\n\n\nRESOURCES - Sources of information you can access\n   - Use resources when you need to retrieve information\n   - Resources are accessed via URI patterns that may be static or templated\n   - To read a resource, use the format:\n     ```\n     {\n       "method": "resources/read",\n       "params":\n\t       {"uri": "resource://example"}\n     }\n     ```\n\nRESOURCE TEMPLATES - Dynamic resources with parameterized URIs\n   - Resource templates allow accessing resources with variable parts in the URI\n   - Templates use curly braces {} to denote parameters that must be filled\n   - To read a templated resource, substitute the parameters directly into the URI:\n     ```\n     {\n       "method": "resources/read",\n       "params": {\n         "uri": "resource://example/value1/value2"\n       }\n     }\n     ```\n   - Template parameters:\n     - Must be substituted directly into the URI template before making the request\n     - Replace each {parameter} with its actual value\n     - The resulting URI should be a concrete path with no template variables\n   - Examples:\n     - Template: `file://todos/{date}` → Usage: `{"method": "resources/read", "params": {"uri": "file://todos/2025-05-03"}}`\n     - Template: `db://users/{userId}/profile` → Usage: `{"method": "resources/read", "params": {"uri": "db://users/123/profile"}}`\n\n\nPROMPTS - Pre-defined templates that users can select for specific interactions\n   - IMPORTANT: Prompts are user-controlled and cannot be directly requested by you (the AI)\n   - You should be aware that prompts exist as an MCP capability, but only mention them if relevant\n   - Users will select prompts through the interface, not through your suggestions \n   - If available prompts are listed, you can explain their purpose if asked\n\nWhen you need to use any capability:\n1. First determine whether you need a Tool, Resource, or Prompt\n2. Format your request using the correct structure as shown above\n3. For tools, acknowledge that human approval may be required\n4. If an error occurs, try different parameters or an alternative approach\n5. Report on whether the capability was successfully used\n\nThe system will handle formatting your request into a proper JSON-RPC message, execute it, and return the results, which you should incorporate into your response appropriately.\n\nIf you have a final answer, wrap it in xml tags like this:\n<answer></answer>\n\n\nYou have access to the following tools:\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n\n\nYou have access to the following resources:\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n\n\nYou have access to the following resource templates:\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n\n\nThe user has access to the following prompts:\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n\n\nRemember to wrap your final answer in <answer> tags.'}, {'role': 'user', 'content': 'What were my todos for May 3 2025?'}, {'role': 'assistant', 'content': '{"method":"resources/read","params":{"uri":"file://todos/2025-05-03"}}'}, {'role': 'assistant', 'content': '{\n  "meta": null,\n  "resource": {\n    "uri": "file://todos/2025-05-03",\n    "contents": {\n      "text": "- [ ] Finances\\n    - [ ] Set up financial planner appt\\n    - [ ] Boston city fees\\n    - [ ] Budget\\n",\n      "uri": "file://todos/2025-05-03",\n      "mimeType": "text/plain"\n    }\n  }\n}'}], 'model': 'o4-mini'}}
2025-05-26 06:52:39,895 [DEBUG] openai._base_client:965 (request) - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-26 06:52:39,895 [DEBUG] httpcore.connection:45 (trace) - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-26 06:52:39,944 [DEBUG] httpcore.connection:45 (trace) - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a02bc0ca930>
2025-05-26 06:52:39,944 [DEBUG] httpcore.connection:45 (trace) - start_tls.started ssl_context=<ssl.SSLContext object at 0x7a03155689d0> server_hostname='api.openai.com' timeout=5.0
2025-05-26 06:52:39,981 [DEBUG] httpcore.connection:45 (trace) - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a02bc077710>
2025-05-26 06:52:39,981 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.started request=<Request [b'POST']>
2025-05-26 06:52:39,982 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.complete
2025-05-26 06:52:39,982 [DEBUG] httpcore.http11:45 (trace) - send_request_body.started request=<Request [b'POST']>
2025-05-26 06:52:39,982 [DEBUG] httpcore.http11:45 (trace) - send_request_body.complete
2025-05-26 06:52:39,982 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.started request=<Request [b'POST']>
2025-05-26 06:52:44,042 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 26 May 2025 11:52:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-yt5gmdycbwqiyiljkp9f4xxo'), (b'openai-processing-ms', b'3906'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3919'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'4000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'3998804'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'17ms'), (b'x-request-id', b'req_de250e08661f8e48cccbc85244dc9c86'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'945d1151fcb4511c-MSP'), (b'Content-Encoding', b'br'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-26 06:52:44,042 [INFO] httpx:1025 (_send_single_request) - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-26 06:52:44,042 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.started request=<Request [b'POST']>
2025-05-26 06:52:44,042 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.complete
2025-05-26 06:52:44,042 [DEBUG] httpcore.http11:45 (trace) - response_closed.started
2025-05-26 06:52:44,042 [DEBUG] httpcore.http11:45 (trace) - response_closed.complete
2025-05-26 06:52:44,042 [DEBUG] openai._base_client:1003 (request) - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 26 May 2025 11:52:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-yt5gmdycbwqiyiljkp9f4xxo', 'openai-processing-ms': '3906', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3919', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '4000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '3998804', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '17ms', 'x-request-id': 'req_de250e08661f8e48cccbc85244dc9c86', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '945d1151fcb4511c-MSP', 'content-encoding': 'br', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-26 06:52:44,043 [DEBUG] openai._base_client:1011 (request) - request_id: req_de250e08661f8e48cccbc85244dc9c86
2025-05-26 06:52:44,043 [DEBUG] instructor:134 (process_response) - Instructor Raw Response: ChatCompletion(id='chatcmpl-BbQfg23TekExfq3MXaFv6yWOymVIl', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='<answer>\nYour todos for May 3, 2025 were:\n- Finances:\n  - Set up financial planner appointment\n  - Boston city fees\n  - Budget\n</answer>', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1748260360, model='o4-mini-2025-04-16', object='chat.completion', service_tier='default', system_fingerprint=None, usage=CompletionUsage(completion_tokens=186, prompt_tokens=1192, total_tokens=1378, completion_tokens_details=None, prompt_tokens_details=None))
2025-05-26 06:52:44,043 [DEBUG] instructor:139 (process_response) - No response model, returning response as is
2025-05-26 06:52:44,043 [DEBUG] instructor:48 (initialize_retrying) - max_retries: 3
2025-05-26 06:52:44,043 [DEBUG] instructor:136 (retry_sync) - Retrying, attempt: 1
2025-05-26 06:52:44,044 [DEBUG] openai._base_client:482 (_build_request) - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-243598e5-7af5-4b84-81d0-6f7e729bc047', 'json_data': {'messages': [{'role': 'system', 'content': 'You have access to one or more of following capabilities through the MCP framework:\n\nTOOLS - Functions you can call to perform actions\n   - Use tools when you need to execute operations or compute something\n   - Each tool has a name, description, and defined parameters\n   - To call a tool, use the format:\n     ```\n     {\n       "method": "tools/call",\n       "params": {\n\t       "name": "tool_name",\n\t       "arguments": {\n\t\t "param1": "value1",\n\t\t "param2": "value2"\n\t       }\n\t}\n     }\n     ```\n\n\nRESOURCES - Sources of information you can access\n   - Use resources when you need to retrieve information\n   - Resources are accessed via URI patterns that may be static or templated\n   - To read a resource, use the format:\n     ```\n     {\n       "method": "resources/read",\n       "params":\n\t       {"uri": "resource://example"}\n     }\n     ```\n\nRESOURCE TEMPLATES - Dynamic resources with parameterized URIs\n   - Resource templates allow accessing resources with variable parts in the URI\n   - Templates use curly braces {} to denote parameters that must be filled\n   - To read a templated resource, substitute the parameters directly into the URI:\n     ```\n     {\n       "method": "resources/read",\n       "params": {\n         "uri": "resource://example/value1/value2"\n       }\n     }\n     ```\n   - Template parameters:\n     - Must be substituted directly into the URI template before making the request\n     - Replace each {parameter} with its actual value\n     - The resulting URI should be a concrete path with no template variables\n   - Examples:\n     - Template: `file://todos/{date}` → Usage: `{"method": "resources/read", "params": {"uri": "file://todos/2025-05-03"}}`\n     - Template: `db://users/{userId}/profile` → Usage: `{"method": "resources/read", "params": {"uri": "db://users/123/profile"}}`\n\n\nPROMPTS - Pre-defined templates that users can select for specific interactions\n   - IMPORTANT: Prompts are user-controlled and cannot be directly requested by you (the AI)\n   - You should be aware that prompts exist as an MCP capability, but only mention them if relevant\n   - Users will select prompts through the interface, not through your suggestions \n   - If available prompts are listed, you can explain their purpose if asked\n\nWhen you need to use any capability:\n1. First determine whether you need a Tool, Resource, or Prompt\n2. Format your request using the correct structure as shown above\n3. For tools, acknowledge that human approval may be required\n4. If an error occurs, try different parameters or an alternative approach\n5. Report on whether the capability was successfully used\n\nThe system will handle formatting your request into a proper JSON-RPC message, execute it, and return the results, which you should incorporate into your response appropriately.\n\nIf you have a final answer, wrap it in xml tags like this:\n<answer></answer>\n\n\nYou have access to the following tools:\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n{\'name\': \'add\', \'description\': \'Add two numbers.\', \'inputSchema\': {\'type\': \'object\', \'properties\': {\'a\': \'int\', \'b\': \'int\'}}}\n\n\n\nYou have access to the following resources:\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n{\'uri\': \'names://sheepadoodle\', \'name\': \'name_of_sheepadoodle\', \'description\': \'Returns the name of the sheepadoodle.\', \'mimeType\': \'text/plain\', \'size\': 1024}\n\n\n\nYou have access to the following resource templates:\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n{\'uriTemplate\': \'file://todos/{date}\', \'name\': \'todos\', \'description\': \'Returns a list of todos for a given date. Requires YYYY-MM-DD format.\', \'mimeType\': \'text/plain\'}\n\n\n\nThe user has access to the following prompts:\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n{\'name\': \'partner\', \'description\': \'Suggest some endorsing partners for a given topic.\', \'arguments\': [{\'name\': \'topic\', \'description\': \'\', \'required\': True}]}\n\n\n\nRemember to wrap your final answer in <answer> tags.'}, {'role': 'user', 'content': 'What were my todos for May 3 2025?'}, {'role': 'assistant', 'content': '{"method":"resources/read","params":{"uri":"file://todos/2025-05-03"}}'}, {'role': 'assistant', 'content': '{\n  "meta": null,\n  "resource": {\n    "uri": "file://todos/2025-05-03",\n    "contents": {\n      "text": "- [ ] Finances\\n    - [ ] Set up financial planner appt\\n    - [ ] Boston city fees\\n    - [ ] Budget\\n",\n      "uri": "file://todos/2025-05-03",\n      "mimeType": "text/plain"\n    }\n  }\n}'}], 'model': 'o4-mini', 'stream': True}}
2025-05-26 06:52:44,044 [DEBUG] openai._base_client:965 (request) - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-26 06:52:44,044 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.started request=<Request [b'POST']>
2025-05-26 06:52:44,044 [DEBUG] httpcore.http11:45 (trace) - send_request_headers.complete
2025-05-26 06:52:44,044 [DEBUG] httpcore.http11:45 (trace) - send_request_body.started request=<Request [b'POST']>
2025-05-26 06:52:44,044 [DEBUG] httpcore.http11:45 (trace) - send_request_body.complete
2025-05-26 06:52:44,044 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.started request=<Request [b'POST']>
2025-05-26 06:52:47,606 [DEBUG] httpcore.http11:45 (trace) - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 26 May 2025 11:52:47 GMT'), (b'Content-Type', b'text/event-stream; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-yt5gmdycbwqiyiljkp9f4xxo'), (b'openai-processing-ms', b'3415'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3423'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'4000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'3998804'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'17ms'), (b'x-request-id', b'req_c0eb1e996fa5fcd1caa2491b139d0c8f'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'945d116b6d81511c-MSP'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-26 06:52:47,607 [INFO] httpx:1025 (_send_single_request) - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-26 06:52:47,607 [DEBUG] openai._base_client:1003 (request) - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 26 May 2025 11:52:47 GMT', 'content-type': 'text/event-stream; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-yt5gmdycbwqiyiljkp9f4xxo', 'openai-processing-ms': '3415', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3423', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '4000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '3998804', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '17ms', 'x-request-id': 'req_c0eb1e996fa5fcd1caa2491b139d0c8f', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '945d116b6d81511c-MSP', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-26 06:52:47,619 [DEBUG] openai._base_client:1011 (request) - request_id: req_c0eb1e996fa5fcd1caa2491b139d0c8f
2025-05-26 06:52:47,619 [DEBUG] instructor:160 (update_total_usage) - No compatible response.usage found, token usage not updated.
2025-05-26 06:52:47,619 [DEBUG] instructor:134 (process_response) - Instructor Raw Response: <openai.Stream object at 0x7a02bc0cb3b0>
2025-05-26 06:52:47,619 [DEBUG] instructor:139 (process_response) - No response model, returning response as is
2025-05-26 06:52:47,620 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.started request=<Request [b'POST']>
2025-05-26 06:52:48,010 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.failed exception=GeneratorExit()
2025-05-26 06:52:48,010 [DEBUG] httpcore.http11:45 (trace) - receive_response_body.failed exception=GeneratorExit()
2025-05-26 06:52:48,010 [DEBUG] httpcore.http11:45 (trace) - response_closed.started
2025-05-26 06:52:48,010 [DEBUG] httpcore.http11:45 (trace) - response_closed.complete
